@page "/Curso/Index"
@using Ronalfy_Jimenez_P2_Ap1.Services
@inject CursoService cursoService
@inject CursosDetalleService cursoDetalleService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Encuesta</PageTitle>

<div class="card shadow-lg">
    <div class="card-header bg-white text-center text-white py-3 rounded">
        <h3 class="font-weight-bold text-black">Encuesta</h3>
    </div>

    <div class="col-md-6 d-flex align-items-end">
        <div class="w-50 pe-2">
            <label for="Desde" class="form-label">Desde:</label>
            <input type="date" class="form-control" @bind="Desde" />
        </div>
        <div class="w-50 ps-2">
            <label for="Hasta" class="form-label">Hasta:</label>
            <input type="date" class="form-control" @bind="Hasta" />
        </div>
    </div>

    <div class="row mb-3 align-items-center px-3">
        <div class="col-md-3">
            <label for="Filtro" class="form-label">Filtrar por:</label>
            <select class="form-select" @bind="filtro">
                <option value="CursosID">CursosID</option>
                <option value="Asignatura">Asignatura</option>
            </select>
        </div>
        <div class="col-md-6">
            <label for="ValorFiltro" class="form-label">B&uacute;squeda:</label>
            <div class="input-group">
                <input type="text" class="form-control" @bind="valorFiltro" placeholder="Buscar" />
                <button class="btn btn-primary" type="button" @onclick="Buscar">
                    <i class="bi bi-search"></i> Buscar
                </button>
            </div>
        </div>
        <div class="col-md-3 text-end">
            <a href="/Curso/Create" class="btn btn-success">
                <i class="bi bi-plus-circle"></i> Crear
            </a>
        </div>
    </div>

    <table class="table table-bordered text-center">
        <thead>
            <tr>
                <th>Id</th>
                <th>Fecha</th>
                <th>Asignatura</th>
                <th>Monto</th>
                <th>Editar</th>
                <th>Eliminar</th>
            </tr>
        </thead>
        <tbody>
            @if (Listar != null && Listar.Count > 0)
            {
                @foreach (var cursos in Listar)
                {
                    <tr>
                        <td>@cursos.CursosId</td>
                        <td>@cursos.Fecha.ToString("yyyy-MM-dd")</td>
                        <td>@cursos.Asignatura</td>
                        <td>@cursos.Monto</td>

                        <td>
                            <a href="/Curso/Edit/@cursos.CursosId" class="btn btn-outline-success">
                                <i class="bi bi-pencil-square fs-4"></i>
                            </a>
                        </td>
                        <td>
                            <a href="/Curso/Delete/@cursos.CursosId" class="btn btn-outline-danger">
                                <i class="bi bi-trash-fill fs-4"></i>
                            </a>
                        </td>
                    </tr>

                }
                <tr>
                    <td colspan="5" class="text-end fw-bold">Total:</td>
                    <td class="fw-bold">@TotalMontos</td>
                    <td colspan="2"></td>
                </tr>
            }
            else
            {
                <tr>
                    <td colspan="8">No se encontraron resultados</td>
                </tr>
            }
        </tbody>
    </table>

    <div class="card-footer d-flex justify-content-between">
        <p>Conteo: @Listar.Count</p>
    </div>
</div>

@code {
    public List<Cursos> Listar { get; set; } = new List<Cursos>();
    public string filtro { get; set; } = "CursosID";
    public string valorFiltro { get; set; } = string.Empty;
    public double TotalMontos { get; set; } = 0;
    public DateTime? Desde { get; set; }
    public DateTime? Hasta { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Listar = await cursoService.Listar(s => true);
        CalcularTotalMontos();
    }

    public async Task Buscar()
    {
        var listaFiltrada = await cursoService.Listar(p => true);

        if (Desde.HasValue && Hasta.HasValue)
        {
            listaFiltrada = listaFiltrada
                .Where(m => m.Fecha >= Desde.Value && m.Fecha <= Hasta.Value)
                .ToList();
        }

        if (!string.IsNullOrEmpty(valorFiltro))
        {
            if (filtro == "CursosID" && int.TryParse(valorFiltro, out int cursosId))
            {
                listaFiltrada = listaFiltrada.Where(m => m.CursosId == cursosId).ToList();
            }
            else if (filtro == "Asignatura")
            {
                listaFiltrada = listaFiltrada
                    .Where(m => m.Asignatura.ToLower().Contains(valorFiltro.ToLower()))
                    .ToList();
            }
        }

        Listar = listaFiltrada;
        CalcularTotalMontos();
    }

    private void CalcularTotalMontos()
    {
        TotalMontos = Listar.Sum(c => c.Monto);
    }
}