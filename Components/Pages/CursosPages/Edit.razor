@page "/Curso/Edit/{CursosId:int}"
@using Ronalfy_Jimenez_P2_Ap1.Services
@inject CursoService cursoService
@inject CiudadService ciudadService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<EditForm Model="Cursos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="card-header bg-primary text-center text-white py-2 rounded">
        <h3 class="font-weight-bold">Modificar Encuesta</h3>
    </div>

    <div class="card-body">
        <div class="mb-3">
            <label for="CursosId" class="form-label">CursosId:</label>
            <InputNumber @bind-Value="Cursos.CursosId" class="form-control" disabled />
        </div>

        <div class="mb-3">
            <label for="Fecha" class="form-label"><strong>Fecha</strong></label>
            <InputDate class="form-control" @bind-Value="Cursos.Fecha"></InputDate>
        </div>

        <div class="mb-3">
            <label for="Asignatura" class="form-label"><strong>Asignatura</strong></label>
            <InputText class="form-control" @bind-Value="Cursos.Asignatura"></InputText>
            <ValidationMessage For="(() => Cursos.Asignatura)" />
        </div>
    </div>

    <div class="border border-success p-3 mt-3">
        <h4>Detalles de Cursos</h4>
        @if (!string.IsNullOrEmpty(DetalleMensaje))
        {
                <div class="alert alert-danger" role="alert">
                @DetalleMensaje
                </div>
        }
        <div class="row">
            <div class="col-auto input-group align-items-center">
                <InputSelect class="form-select" @bind-Value="CursosDetalles.CiudadId">
                    <option disabled value="0">--- Seleccione una Ciudad ---</option>
                    @foreach (var ciudad in Ciudades)
                    {
                            <option value="@ciudad.CiudadId">@ciudad.Nombre</option>
                    }
                </InputSelect>

                <label class="col-form-label input-group-text">Monto</label>
                <InputNumber class="form-control" @bind-Value="CursosDetalles.Monto" placeholder="0.00"></InputNumber>
                <button type="button" class="btn btn-success bi bi-floppy" @onclick="AgregarDetalle">Agregar detalle</button>
            </div>
        </div>

        <div>
            <table class="table table-light">
                <thead class="table-striped">
                    <tr class="text-center">
                        <th>Ciudad</th>
                        <th>Monto</th>
                        <th>Modificar</th>
                        <th>Remover</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var detalle in Cursos.CursosDetalle)
                    {
                            <tr class="text-center">
                                <td>@Ciudades.FirstOrDefault(c => c.CiudadId == detalle.CiudadId)?.Nombre</td>
                                <td>
                                    <InputNumber class="form-control" @bind-Value="detalle.Monto" @onchange="() => ActualizarMonto()"></InputNumber>
                                </td>
                                <td>
                                    <button type="button" class="btn btn-outline-warning bi bi-pencil" @onclick="ActualizarMonto">Modificar</button>
                                </td>
                                <td>
                                    <button type="button" class="btn btn-outline-danger bi bi-trash" @onclick="() => EliminarCurso(detalle)">Remover</button>
                                </td>
                            </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <div class="card-footer d-flex justify-content-lg-center text-center">
        <div class="btn-group">
            <button type="submit" class="btn btn-outline-success ml-2"><span class="bi bi-check-circle-fill"></span> Guardar</button>
            <button type="button" class="btn btn-outline-danger" @onclick="Retroceder"><span class="bi bi-arrow-bar-left"></span> Retroceder</button>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int CursosId { get; set; }
    public Cursos Cursos { get; set; } = new Cursos { CursosDetalle = new List<CursosDetalle>() };
    public CursosDetalle CursosDetalles { get; set; } = new CursosDetalle();
    public List<Ciudades> Ciudades { get; set; } = new List<Ciudades>();
    public string DetalleMensaje { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Ciudades = await ciudadService.Listar(c => c.CiudadId > 0);
        if (CursosId > 0)
        {
            var encontrado = await cursoService.Buscar(CursosId);
            if (encontrado != null)
            {
                Cursos = encontrado;
            }
        }
    }

    private void ActualizarMonto()
    {
        Cursos.Monto = Cursos.CursosDetalle.Sum(d => d.Monto);
        StateHasChanged();
    }

    private async Task AgregarDetalle()
    {
        if (CursosDetalles.CiudadId > 0 && CursosDetalles.Monto > 0)
        {
            Cursos.CursosDetalle.Add(new CursosDetalle
                {
                    CiudadId = CursosDetalles.CiudadId,
                    Monto = CursosDetalles.Monto
                });
            ActualizarMonto();
            CursosDetalles = new CursosDetalle();
            DetalleMensaje = string.Empty;
        }
        else
        {
            DetalleMensaje = "Seleccione una ciudad y monto válido.";
        }
    }

    public async Task EliminarCurso(CursosDetalle detalle)
    {
        Cursos.CursosDetalle.Remove(detalle);
        ActualizarMonto();
    }

    public async Task Retroceder()
    {
        navigationManager.NavigateTo("/Curso/Index");
    }

    public async Task Guardar()
    {
        if (string.IsNullOrWhiteSpace(Cursos.Asignatura))
        {
            DetalleMensaje = "La asignatura es obligatoria.";
            return;
        }

        if (!Cursos.CursosDetalle.Any())
        {
            DetalleMensaje = "Agregue al menos una ciudad.";
            return;
        }

        var resultado = await cursoService.Guardar(Cursos);
        if (resultado)
        {
            navigationManager.NavigateTo("/Curso/Index");
        }
        else
        {
            DetalleMensaje = "Error al guardar cambios.";
        }
    }
}
